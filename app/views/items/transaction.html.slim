.top-wrapper
  .item_main
    h5.item_name = @item.name
    .item_main_content 
      .top-img_wrapper
        .img-wrapper
          - if @item.img?
            = image_tag(@item.img.thumb300.url)
          - else 
            = image_tag("item_img/default.png")
          - if @item.sold_flag == true
            .sold-badge-show 
            p SOLD
      table
        tbody 
          tr 
            th 出品者
            td
              = link_to @item.user.name, user_path(@item.user.id) 
              .assessment_container
                .assessment-icon 
                  i.fas.fa-smile-beam style='color: red;'
                  p = @user_assessments.where(user_rank: "good").count
                .assessment-icon 
                  i.fas.fa-meh style='color: gray'
                  p = @user_assessments.where(user_rank: "nomall").count
                .assessment-icon 
                  i.fas.fa-sad-tear style='color: blue;'
                  p = @user_assessments.where(user_rank: "bad").count
          tr
            th カテゴリ
            td = @item.category.name
          tr
            th 商品の状態
            td = @item.item_condition.condition
          tr
            th 配送料の負担
            td = @item.shipping_fee
          tr
            th 配送の方法
            td = @item.shipping_fee
          tr
            th 配送元地域
            td = @item.prefecture.name
          tr
            th 発送日の目安
            td = @item.shipping_date
  .item_price 
    h5 ￥#{@item.price} 
    p （税込み）

  - if @item.user_id == current_user.id
    - if @item.in_process?
      .message-container 
        .top-message
          i.fas.fa-truck
          h5 発送をしてください
        p = "#{@buyer.name}さんが商品を購入しました｡ 商品の発送を行ってください｡"
      button
        = link_to '商品を発送したので､発送通知を送る', shipped_item_path(@item), class:'shipped-btn'
    - elsif @item.shipped?
      .message-container 
        .top-message
          i.fas.fa-check
          h5 商品の発送を通知しました！
        p = "#{@buyer.name}さんからの受け取り評価をお待ちください｡"
    - elsif @item.buyer_assessed?
      .message-container 
        .top-message
          i.fas.fa-check
          h5 = "#{@buyer.name}さんからの受取評価が完了しました！"
        p = "#{@buyer.name}さんの評価を完了してください"
      .assessment__wrapper
        = form_with  model: [@item, @assessment] do |f|
          .top-radio-container
            .radio-btn-container
              i.fas.fa-smile-beam style='color: red;'
              = f.label :good, class:'radio-label'
              = f.radio_button :user_rank, :good, class:'radio-btn'      
            .radio-btn-container          
              i.fas.fa-meh style='color: gray'
              = f.label :nomall, class:'radio-label'
              = f.radio_button :user_rank, :nomall, class:'radio-btn'
            .radio-btn-container
              i.fas.fa-sad-tear style='color: blue;'
              = f.label :bad, class:'radio-label'
              = f.radio_button :user_rank, :bad, class:'radio-btn'
          = f.text_area :message          
          = f.hidden_field :user_id, value: current_user.id
          = f.hidden_field :trading_partner_id, value: @item.buyer_id
          = f.submit '評価を投稿する', class: 'submit-btn'
    - elsif @item.seller_assessed?
      .message-container 
        .top-message.last-message
          i.far.fa-check-circle
          h5 取引が完了しました
        p この度はコピーメルカリのご利用ありがとうございました
  - elsif @item.buyer_id == current_user.id
    - if @item.in_process?
      .message-container 
        .top-message  
          i.far.fa-clock
          h5 発送をお待ちください
        p = "#{@seller.name}さんからの発送通知をお待ちください｡"
    - elsif @item.shipped?
      .message-container 
        .top-message
          i.far.fa-edit
          h5 受取評価をしてください
        p = "商品が発送されました｡ 商品が到着したら､#{@seller.name}さんの評価をしてください｡"
      .checkbox__container
        input#checkbox type='checkbox'
        p 商品の中身を確認しました
      #assessment__wrapper
        = form_with  model: [@item, @assessment] do |f|
          .top-radio-container
            .radio-btn-container
              i.fas.fa-smile-beam style='color: red;'
              = f.label :good, class:'radio-label'
              = f.radio_button :user_rank, :good, class:'radio-btn'
            .radio-btn-container          
              i.fas.fa-meh style='color: gray'
              = f.label :nomall, class:'radio-label'
              = f.radio_button :user_rank, :nomall, class:'radio-btn'
            .radio-btn-container
              i.fas.fa-sad-tear style='color: blue;'
              = f.label :bad, class:'radio-label'
              = f.radio_button :user_rank, :bad, class:'radio-btn'
          p 評価のコメントを記入しましょう
          = f.text_area :message, placeholder: 'このコメントは取引完了後に評価一覧で公開されます｡商品に問題がある場合は評価をせずに､取引メッセージで伝えましょう｡'
          = f.hidden_field :user_id, value: current_user.id
          = f.hidden_field :trading_partner_id, value: @item.user_id
          = f.submit '評価を投稿する', class: 'submit-btn'
    -elsif @item.buyer_assessed?
      .message-container 
        .top-message
          i.fas.fa-check
          h5 受け取り評価を送りました！
        p = "#{@seller.name}さんからの購入者評価をお待ちください｡"
    -elsif @item.seller_assessed?
      .message-container 
        .top-message.last-message
          i.far.fa-check-circle
          h5 = "#{@seller.name}さんとの取引が完了しました"
        p この度はコピーメルカリのご利用ありがとうございました

.middle-wrapper 
  p.attention 取引メッセージの内容は、必要に応じて事務局で確認しています
  .comment-container
    .comment_history
      ul
        - if @chats 
          - @chats.each do |chat|    
            - if chat.user != current_user
              li
                = link_to user_path(chat.user), class:'user-link-left', method: :get do 
                  i.fas.fa-user-circle
                  p = chat.user.name
                .balloon-left
                  p.message = chat.message
                  .time-trash
                    .create-time                      
                      i.far.fa-clock
                      div = chat.created_at.to_s(:datetime_jp)
                    - if current_user && current_user.id == chat.user_id
                      = link_to item_chat_path(@item,chat), method: :delete do
                        i.far.fa-trash-alt 
            - elsif chat.user == current_user
              li
                = link_to user_path(chat.user), class:'user-link-right', method: :get do 
                  i.fas.fa-user-circle
                  p = chat.user.name
                .balloon-right
                  p.message = chat.message
                  .time-trash
                    .create-time                      
                      i.far.fa-clock
                      div = chat.created_at.to_s(:datetime_jp)
                    - if current_user && current_user.id == chat.user_id
                      = link_to item_chat_path(@item,chat), method: :delete do
                        i.far.fa-trash-alt     
      / - unless @item.seller_assessed?
      .comment-area
        = form_with  model: [@item, @chat] do |f|
          = f.text_area :message
          = f.hidden_field :room_id, value: @item.rooms.last.id
          = f.hidden_field :item_id, value: @item.id
          = f.submit '取引メッセージを送る', class: 'submit-btn'
